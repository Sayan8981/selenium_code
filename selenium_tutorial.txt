Selenium


*Packages to be import :

import logging
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common import keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait,Select
import unittest

*create driver object:

driver=webdriver.chrome()


*to open the browser:

driver.get("<url_name>")

*to get title of the page:

print (driver.title)

*to close the browser:

driver.close()


* to return current page

driver.current_url

* to keep continuous open the browser

chrome_options = Options()
chrome_options.add_experimental_option("detach", True)

* to open browser in incogneto mode

# make driver parameter global
global driver
chrome_options.add_argument("--incognito")

* implicit wait

driver.implicitly_wait(10) # in seconds

* explicitly wait

wait = WebDriverWait(driver,10) 
wait.until(EC.element_to be_clickable(<locator>))

* to switch the pop up frames

driver.switch_to_frame 

* to maximize the window

driver.maximize_window()

* scroll down the page by pixel

driver.execute_script("window.scrollby(0,1000)","")

* scroll down page by element 

-> indentify the element first till which you want to scroll
-> driver.execute_script("arguments[0].scrollIntoView();",<identified element>)

* scroll down the page till end

driver.execute_script("window.scrollBy(0,document.body.scrollHeight)")

* mouse hover action

-> ActionChains(driver).move_to_element(<element tag>).<move_to_element(<element tag>)>.click().perform()

* mouse double click action

-> identify the element 
-> ActionChains(driver).double_click(<element name>).perform()

* mouse right click action on element

-> identify the element 
-> ActionChains(driver).context_click(<element name>).perfom()

* mouse drag and drop action

-> identify the source element
-> identify the target element 
-> ActionChains(driver).drag_and_drop(<source_element name>,<target_element name>).perform()

* how to upload file action

-> switch to frame first
-> <identify the element>.send_keys(<file path>)

* uploading file action

driver.<find_element by <tag_name>>.send_keys(<file_path/filename>)

* downloading files 

ref: class <downloading_files_chrome> and class <downloading_files_firefox>

* data driven testing using Excel

refer class data_driven_test_action

* how to save screenshot in selenium

driver.save_screenshoot(<file_path>) or driver.get_screenshot_as_file(<file_path>)

* logging

logging.basicConfig(filename=<fileName_location>, level=logging.Debug,format='%(asctime)s: %(levelname)s: %(message)s')

* unittest case used 

to automate the multiple testcases in one class

* python unittest framework

- setup (executed before eucution of every test method defined in a class)
- teardown ((executed after eucution of every test method defined in a class))
- setUpClass (executed at one time before eucution of every test method defined in a class)
- tearDownClass (executed at one time after eucution of every test method defined in a class)
- setUpModule (executed before eucution of any method or class)
- tearDownModule (executed before eucution of any method or class)

- Skipping tests
  - Skip test
  - Skip test with reason
  - Skip test with based on conditions

* Assertions in unittest

-  Assertions is nothing but a check point or as verification for the test case to evaluate some item on the execution
- Assertion helps report generation 
